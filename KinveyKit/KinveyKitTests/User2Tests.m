//
//  User2Tests.m
//  KinveyKit
//
//  Created by Michael Katz on 12/11/13.
//  Copyright (c) 2013-2014 Kinvey. All rights reserved.
//
// This software is licensed to you under the Kinvey terms of service located at
// http://www.kinvey.com/terms-of-use. By downloading, accessing and/or using this
// software, you hereby accept such terms of service  (and any agreement referenced
// therein) and agree that you have read, understand and agree to be bound by such
// terms of service and are of legal age to agree to such terms with Kinvey.
//
// This software contains valuable confidential and proprietary information of
// KINVEY, INC and is subject to applicable licensing agreements.
// Unauthorized reproduction, transmission or distribution of this file and its
// contents is a violation of applicable laws.
//


#import <SenTestingKit/SenTestingKit.h>

#import "KinveyUserService.h"
#import "TestUtils2.h"
#import "KinveyCoreInternal.h"
#import "KinveyDataStoreInternal.h"

#import "KCSHiddenMethods.h"
#import "KCSDataStore.h"

@interface User2Tests : SenTestCase

@end

@implementation User2Tests

- (void)setUp
{
    [super setUp];
    [self setupKCS:NO];
}

- (void)tearDown
{
    [super tearDown];
}

- (void) testAutoBasic
{
    self.done = NO;
    __block id createdUser = nil;
    [KCSUser2 createAutogeneratedUser:nil completion:^(id<KCSUser2> user, NSError *error) {
        KTAssertNoError
        STAssertNotNil(user, @"should have a user");
        STAssertTrue([user isKindOfClass:[KCSUser2 class]], @"should be a user object");
        createdUser = user;
        self.done = YES;
    }];
    [self poll];
    
    id activeUser = [KCSUser2 activeUser];
    STAssertNotNil(activeUser, @"should have an activeUser");
    STAssertEqualObjects(activeUser, createdUser, @"should match the created user");
}

- (void) testAutoOptions
{
    self.done = NO;
    __block id createdUser = nil;
    [KCSUser2 createAutogeneratedUser:@{KCSUserAttributeGivenname : @"Fred",
                                        KCSUserAttributeSurname : @"Fredson",
                                        KCSUserAttributeEmail : @"fred@fredson.com"
                                        } completion:^(id<KCSUser2> user, NSError *error) {
        KTAssertNoError
        STAssertNotNil(user, @"should have a user");
        STAssertTrue([user isKindOfClass:[KCSUser2 class]], @"should be a user object");
        createdUser = user;
        self.done = YES;
    }];
    [self poll];
    
    KCSUser2* activeUser = [KCSUser2 activeUser];
    STAssertNotNil(activeUser, @"should have an activeUser");
    STAssertEqualObjects(activeUser, createdUser, @"should match the created user");
    STAssertEqualObjects(activeUser.email, @"fred@fredson.com", @"should be set");
    STAssertEqualObjects(activeUser.surname, @"Fredson", @"should be set");
    STAssertEqualObjects(activeUser.givenName, @"Fred", @"should be set");
}

- (void) testNamedBasic
{
    self.done = NO;
    __block id createdUser = nil;
    NSString* uname = [NSString UUID];
    NSString* password = [NSString UUID];
    [KCSUser2 createUserWithUsername:uname password:password fieldsAndValues:nil completion:^(id<KCSUser2> user, NSError *error) {
        KTAssertNoError
        STAssertNotNil(user, @"should have a user");
        STAssertTrue([user isKindOfClass:[KCSUser2 class]], @"should be a user object");
        createdUser = user;
        self.done = YES;
    }];
    [self poll];
    
    id activeUser = [KCSUser2 activeUser];
    STAssertNotNil(activeUser, @"should have an activeUser");
    STAssertEqualObjects(activeUser, createdUser, @"should match the created user");
    STAssertEqualObjects([activeUser username], uname, @"usernames should match");
    
    STAssertTrue([KCSUser2 hasSavedCredentials], @"yes, please");
}

- (void) testNamedOptions
{
    self.done = NO;
    __block id createdUser = nil;
    NSString* uname = [NSString UUID];
    NSString* password = [NSString UUID];
    [KCSUser2 createUserWithUsername:uname password:password fieldsAndValues:@{KCSUserAttributeGivenname : @"Fred",
                                        KCSUserAttributeSurname : @"Fredson",
                                        KCSUserAttributeEmail : @"fred@fredson.com"
                                        } completion:^(id<KCSUser2> user, NSError *error) {
                                            KTAssertNoError
                                            STAssertNotNil(user, @"should have a user");
                                            STAssertTrue([user isKindOfClass:[KCSUser2 class]], @"should be a user object");
                                            createdUser = user;
                                            self.done = YES;
                                        }];
    [self poll];
    
    KCSUser2* activeUser = [KCSUser2 activeUser];
    STAssertNotNil(activeUser, @"should have an activeUser");
    STAssertEqualObjects(activeUser, createdUser, @"should match the created user");
    STAssertEqualObjects(activeUser.email, @"fred@fredson.com", @"should be set");
    STAssertEqualObjects(activeUser.surname, @"Fredson", @"should be set");
    STAssertEqualObjects(activeUser.givenName, @"Fred", @"should be set");
    STAssertEqualObjects([activeUser username], uname, @"usernames should match");
    
    STAssertTrue([KCSUser2 hasSavedCredentials], @"yes, please");
}

- (void) testLogin
{
    NSString* username = [NSString UUID];
    NSString* password = [NSString UUID];
    
    self.done = NO;
    [KCSUser2 createUserWithUsername:username password:password fieldsAndValues:nil completion:^(id<KCSUser2> user, NSError *error) {
        KTAssertNoError
        STAssertNotNil(user, @"should have a user");
        self.done = YES;
    }];
    [self poll];
    
    [KCSUser2 logoutUser:[KCSUser2 activeUser]];
    KCSUser2* active = [KCSUser2 activeUser];
    STAssertNil(active, @"User should be cleared");
    
    self.done = NO;
    __block KCSUser2* loggedInUser;
    [KCSUser2 loginWithUsername:username password:password completion:^(id<KCSUser2> user, NSError *error) {
        KTAssertNoError
        STAssertNotNil(user, @"should get a user");
        loggedInUser = user;
        self.done = YES;
    }];
    [self poll];
    
    STAssertEqualObjects(loggedInUser, [KCSUser2 activeUser], @"should be active");
    
    [KCSUser2 logoutUser:loggedInUser];
}

- (void) testChangePassword
{
    
    NSString* username = [NSString UUID];
    NSString* password = [NSString UUID];
    
    self.done = NO;
    __block KCSUser2* thisUser = nil;
    [KCSUser2 createUserWithUsername:username password:password fieldsAndValues:nil completion:^(id<KCSUser2> user, NSError *error) {
        KTAssertNoError
        STAssertNotNil(user, @"should have a user");
        thisUser = user;
        self.done = YES;
    }];
    [self poll];
    
    NSString* newPassword = [NSString UUID];
    
    self.done = NO;
    [KCSUser2 changePasswordForUser:thisUser password:newPassword completion:^(id<KCSUser2> user, NSError *error) {
        KTAssertNoError
        STAssertNotNil(user, @"Should get a user back");
        self.done = YES;
    }];
    [self poll];
    
    
    [KCSUser2 logoutUser:[KCSUser2 activeUser]];
    KCSUser2* active = [KCSUser2 activeUser];
    STAssertNil(active, @"User should be cleared");
 
    __block KCSUser2* newUser = nil;
    self.done = NO;
    [KCSUser2 loginWithUsername:username password:newPassword completion:^(id<KCSUser2> user, NSError *error) {
        KTAssertNoError;
        STAssertNotNil(user, @"should get user");
        newUser = user;
        self.done = YES;
    }];
    [self poll];
    STAssertEqualObjects(newUser, [KCSUser2 activeUser], @"should be the new active user");
}

- (void) doLogoutTest:(NSString*)errorCode
{
    NSString* token = [NSString UUID];
    NSString* uid = [NSString UUID];
    NSString* username = [NSString UUID];
    KCSUser2* aUsre = [[KCSUser2 alloc] init];
    aUsre.userId = uid;
    aUsre.username = username;
    [KCSKeychain2 setKinveyToken:token user:uid];
    [[KCSAppdataStore caches] cacheActiveUser:aUsre];
    
    KCSUser2* user = (id)[KCSUser activeUser];
    STAssertNotNil(user, @"should have a user");
    
    KCSMockServer* server = [KCSMockServer sharedServer];
    KCSNetworkResponse* response = [KCSNetworkResponse MockResponseWith:401 data:@{@"error":errorCode}];
    [server setResponse:response forRoute:@"/appdata/kid_test/R"];
    
    self.done = NO;
    KCSDataStore* store = [[KCSDataStore alloc] initWithCollection:@"R"];
    [store query:nil options:@{KCSRequestOptionUseMock : @YES} completion:^(NSArray* objects, NSError* error) {
        STAssertNotNil(error, @"should have an error");
        self.done = YES;
    }];
    [self poll];
}

- (void) test401Logout
{
    [self doLogoutTest:@"InvalidCredentials"];
    
    KCSUser2* user = (id)[KCSUser activeUser];
    STAssertNil(user, @"user should be cleared");
}

- (void) testSettingStops401Logout
{
    NSDictionary* opts = [KCSClient2 sharedClient].configuration.options;
    opts = [opts dictionaryByAddingDictionary:@{KCS_KEEP_USER_LOGGED_IN_ON_BAD_CREDENTIALS : @YES}];
    [[KCSClient2 sharedClient].configuration setOptions:opts];
    
    [self doLogoutTest:@"InvalidCredentials"];
    
    KCSUser2* user = (id)[KCSUser activeUser];
    STAssertNotNil(user, @"user should still be around");
}


- (void) testUserLockedDown
{
    NSDictionary* opts = [KCSClient2 sharedClient].configuration.options;
    opts = [opts dictionaryByAddingDictionary:@{KCS_KEEP_USER_LOGGED_IN_ON_BAD_CREDENTIALS : @YES}];
    [[KCSClient2 sharedClient].configuration setOptions:opts];
    
    [self doLogoutTest:@"UserLockedDown"];
    
    KCSUser2* user = (id)[KCSUser activeUser];
    STAssertNil(user, @"user should be cleared");
}

- (void) testInsufficientCredentialsDoesNotLogoutUser
{
    [self doLogoutTest:@"InsufficientCredentials"];
    
    KCSUser2* user = (id)[KCSUser activeUser];
    STAssertNotNil(user, @"user should still be around");
}

@end
