//
//  KCSProtocolTests.swift
//  KinveyKit
//
//  Created by Victor Barros on 2015-04-24.
//  Copyright (c) 2015 Kinvey. All rights reserved.
//

import UIKit
import XCTest

class KCSProtocolTestsBaseURLProtocol: KCSTestCase {
    
    var request: NSURLRequest?
    var exception: NSException?
    
    private class MockURLProtocol : NSURLProtocol {
        
        static var testCase: KCSProtocolTestsBaseURLProtocol!
        
        override class func canInitWithRequest(request: NSURLRequest) -> Bool {
            testCase.request = request
            
            return false
        }
        
    }
    
    func testBaseURLProtocol() {
        let config = KCSClientConfiguration(
            appKey: "kid_-1WAs8Rh2",
            secret: "2f355bfaa8cb4f7299e914e8e85d8c98",
            options: [
                "KCS_HOST_PROTOCOL" : "http"
            ]
        )
        KCSClient.sharedClient().initializeWithConfiguration(config)
        
        weak var expectationCreateUser = expectationWithDescription("createUser")
        
        KCSTryCatch.try(
            { () -> Void in
                KCSUser.createAutogeneratedUser(
                    nil,
                    completion: { (user: KCSUser!, error: NSError!, actionResult: KCSUserActionResult) -> Void in
                        XCTFail()
                        
                        expectationCreateUser?.fulfill()
                    }
                )
                XCTFail()
            },
            catch: { (exception: NSException!) -> Void in
                self.exception = exception
                XCTAssertNotNil(exception)
                
                expectationCreateUser?.fulfill()
            },
            finally: nil
        )
        
        waitForExpectationsWithTimeout(30, handler: nil)
        
        XCTAssertNil(request)
        XCTAssertNotNil(exception)
    }
    
    override func setUp() {
        super.setUp()
        
        MockURLProtocol.testCase = self
        KCSURLProtocol.registerClass(MockURLProtocol.self)
    }
    
    override func tearDown() {
        KCSURLProtocol.unregisterClass(MockURLProtocol.self)
        
        super.tearDown()
    }
    
}

class KCSProtocolTestsIdMissing: KCSTestCase {
    
    private class MockURLProtocol : NSURLProtocol {
        
        static var enabled = false
        
        override class func canInitWithRequest(request: NSURLRequest) -> Bool {
            return enabled
        }
        
        override class func canonicalRequestForRequest(request: NSURLRequest) -> NSURLRequest {
            return request
        }
        
        private override func startLoading() {
            let user = [
                "name" : "Kinvey2"
            ]
            let data = NSJSONSerialization.dataWithJSONObject(user, options: NSJSONWritingOptions.allZeros, error: nil)!
            
            let response = NSHTTPURLResponse(
                URL: request.URL!,
                statusCode: 200,
                HTTPVersion: "1.1",
                headerFields: [
                    "Content-Type" : "application/json",
                    "Content-Length" : String(data.length)
                ]
                )!
            client!.URLProtocol(
                self,
                didReceiveResponse: response,
                cacheStoragePolicy: NSURLCacheStoragePolicy.NotAllowed
            )
            client!.URLProtocol(self, didLoadData: data)
            client!.URLProtocolDidFinishLoading(self)
        }
        
    }
    
    func testIdMissing() {
        let config = KCSClientConfiguration(
            appKey: "kid_-1WAs8Rh2",
            secret: "2f355bfaa8cb4f7299e914e8e85d8c98",
            options: nil
        )
        KCSClient.sharedClient().initializeWithConfiguration(config)
        
        let collection = KCSCollection(fromString: "company", ofClass: NSMutableDictionary.self)
        let store = KCSLinkedAppdataStore(collection: collection, options: nil)
        
        weak var expectationCreateUser = expectationWithDescription("createUser")
        
        KCSUser.createAutogeneratedUser(
            nil,
            completion: { (user: KCSUser!, error: NSError!, actionResult: KCSUserActionResult) -> Void in
                XCTAssertNotNil(user)
                XCTAssertNil(error)
                
                expectationCreateUser?.fulfill()
            }
        )
        
        waitForExpectationsWithTimeout(30, handler: nil)
        
        MockURLProtocol.enabled = true
        
        weak var expectationSave = expectationWithDescription("save")
        
        store.saveObject(
            [
                "name" : "Kinvey"
            ],
            withCompletionBlock: { (results: [AnyObject]!, error: NSError!) -> Void in
                XCTAssertNil(results)
                XCTAssertNotNil(error)
                XCTAssertEqual(error.localizedDescription, "KCSPersistable objects requires the `\(KCSEntityKeyId)` property")
                
                expectationSave?.fulfill()
            },
            withProgressBlock: nil
        )
        
        waitForExpectationsWithTimeout(30, handler: nil)
    }
    
    override func setUp() {
        super.setUp()
        
        KCSURLProtocol.registerClass(MockURLProtocol.self)
    }
    
    override func tearDown() {
        KCSURLProtocol.unregisterClass(MockURLProtocol.self)
        
        super.tearDown()
    }
    
}
